{
    "docs": [
        {
            "location": "/",
            "text": "About\n\n\nThe following documentation provides notes for things I am in the process of learning.",
            "title": "Home"
        },
        {
            "location": "/#about",
            "text": "The following documentation provides notes for things I am in the process of learning.",
            "title": "About"
        },
        {
            "location": "/css-docs/web-design/",
            "text": "Typography\n\n\n\n\n\"Typography is the art and technique of arranging type to make written language readable and beautiful\"\n\n\n\n\n\n\nUse a font size between 15 and 25 pixels\n\n\nUse (really) big font sizes for headlines\n\n\nUse line spacing between 120 and 150%\n\n\n45 to 90 characters per line\n\n\nChoose good fonts\n\n\nSans-serif have a cleaner and simpler look\n\n\nMore neutral\n\n\nClean\n\n\nSimple\n\n\nModern websites\n\n\n\n\n\n\nSerif has small extensions on each letter\n\n\nTraditional purposes\n\n\nStorytelling\n\n\nLong reading\n\n\n\n\n\n\n\n\n\n\n\n\nColor\n\n\n\n\nUse a single base color\n\n\nUse color to draw attention (to elements of importance like a button)\n\n\nNever use black as part of your design\n\n\nChoose colors wisely\n\n\nRed: power, passion, strength\n\n\nOrange: attention, cherful, creativity, friendlyness\n\n\nGreen: nature, life, money\n\n\nBlue: patience, peace, trust, stability, honor\n\n\nPurple: Power, royalty, mystery, wisdom\n\n\n\n\n\n\n\n\nImages\n\n\nPutting text on an image\n\n\n\n\nPut text directly on an image\n\n\nOnly works if image is dark and text is light\n\n\n\n\n\n\nOverlay image with a color (to make it darker)\n\n\nCould use gradients\n\n\n\n\n\n\nPut text in a caption box\n\n\nBox should be opaque\n\n\n\n\n\n\nBlur image\n\n\nFloor fade\n\n\nImage fades to black from top to bottom\n\n\nText is on bottom\n\n\n\n\n\n\n\n\nIcons\n\n\n\n\nUse icons to list features/steps\n\n\nUse icons for actions and links\n\n\nIcons should be recognizable\n\n\nLabel the icons\n\n\n\n\n\n\nShouldn't take center stage\n\n\n\n\nFormats\n\n\n\n\nStatic\n images\n\n\nCan become blury with larger resolutions\n\n\n\n\n\n\nVector\n icon fonts\n\n\nscalable for any resolution and won't get blury\n\n\n\n\n\n\n\n\nSpacing and Layout\n\n\n\n\nUse whitespace\n\n\nPut between elements\n\n\nPut between groups of elements\n\n\nPut between website's sections\n\n\nDon't exaggerate\n\n\n\n\n\n\nDefine hierarchy\n\n\nWhitespace describes invisible relationships between the elements of a website\n\n\nDefine where you want audience to look first\n\n\nEstablish a flow that corresponds to your content's message\n\n\nUse whitespace to build that flow\n\n\n\n\n\n\n\n\nUser Experience",
            "title": "Web Design"
        },
        {
            "location": "/css-docs/web-design/#typography",
            "text": "\"Typography is the art and technique of arranging type to make written language readable and beautiful\"    Use a font size between 15 and 25 pixels  Use (really) big font sizes for headlines  Use line spacing between 120 and 150%  45 to 90 characters per line  Choose good fonts  Sans-serif have a cleaner and simpler look  More neutral  Clean  Simple  Modern websites    Serif has small extensions on each letter  Traditional purposes  Storytelling  Long reading",
            "title": "Typography"
        },
        {
            "location": "/css-docs/web-design/#color",
            "text": "Use a single base color  Use color to draw attention (to elements of importance like a button)  Never use black as part of your design  Choose colors wisely  Red: power, passion, strength  Orange: attention, cherful, creativity, friendlyness  Green: nature, life, money  Blue: patience, peace, trust, stability, honor  Purple: Power, royalty, mystery, wisdom",
            "title": "Color"
        },
        {
            "location": "/css-docs/web-design/#images",
            "text": "",
            "title": "Images"
        },
        {
            "location": "/css-docs/web-design/#putting-text-on-an-image",
            "text": "Put text directly on an image  Only works if image is dark and text is light    Overlay image with a color (to make it darker)  Could use gradients    Put text in a caption box  Box should be opaque    Blur image  Floor fade  Image fades to black from top to bottom  Text is on bottom",
            "title": "Putting text on an image"
        },
        {
            "location": "/css-docs/web-design/#icons",
            "text": "Use icons to list features/steps  Use icons for actions and links  Icons should be recognizable  Label the icons    Shouldn't take center stage",
            "title": "Icons"
        },
        {
            "location": "/css-docs/web-design/#formats",
            "text": "Static  images  Can become blury with larger resolutions    Vector  icon fonts  scalable for any resolution and won't get blury",
            "title": "Formats"
        },
        {
            "location": "/css-docs/web-design/#spacing-and-layout",
            "text": "Use whitespace  Put between elements  Put between groups of elements  Put between website's sections  Don't exaggerate    Define hierarchy  Whitespace describes invisible relationships between the elements of a website  Define where you want audience to look first  Establish a flow that corresponds to your content's message  Use whitespace to build that flow",
            "title": "Spacing and Layout"
        },
        {
            "location": "/css-docs/web-design/#user-experience",
            "text": "",
            "title": "User Experience"
        },
        {
            "location": "/css-docs/tags/",
            "text": "Background Images\n\n\nbackground-image\n\n\nbackground-image: url(path/to/img.jpg);\nbackground-image: linear-gradient(rgba(0, 0, 0, .7), rgba(0, 0, 0, .7)), url(path/to/img.jpg);\n\n\n\n\nbackground-size\n\n\nbackground-size: contain;\nbackground-size: cover;\nbackground-size: 30%;\n\n\n\n\n\n\ncontain\n: Scales the image as large as possible without cropping or stretching the image.\n\n\ncover\n: Scales the image as large as possible without stretching the image. If the proportions of the image differ from the element, it is cropped either vertically or horizontally so that no empty space remains.\n\n\n\n\nbackground-position\n\n\nbackground-position: top;\nbackground-position: left;\nbackground-position: center;\nbackground-position: right 35% bottom 45%;\n\n\n\n\nbackground-attatchment\n\n\n// parallax effect\nbackground-attachment: fixed;\n\n\n\n\nposition\n\n\nAbsolute\n\n\nAn absolutely positioned element is an element whose computed position value is absolute or fixed. The top, right, bottom, and left properties specify offsets from the edges of the element's containing block.\n\n\nposition: absolute;\ntop: 0px; left: 0px;\n\n\n\n\ntransform\n\n\ntransform: translate(-50%, -50%);\ntransform: scale(2, 0.5);\ntransform: rotate(180deg);\ntransform: skew(30deg, 20deg);\n\n\n\n\nCentering with transform\n\n\n.container {\n    position: relative;\n}\n\n.box {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n\n\n\n\ntransition\n\n\n.button {\n    width: 100px;\n    transition: width 1s;\n}\n\n.button: hover {\n    width: 200px;\n}\n\n\n\n\n.button {\n    background: white;\n    color: blue;\n\n    transition-property: background, color;\n    transition-duration: 1s, 1s;\n}\n\n.button:hover {\n    background: blue;\n    color: white;\n}\n\n\n\n\n@media\n\n\n@media only screen and (max-width: 1200px) {\n    p {\n        color: #fff;\n    }\n}\n\n\n\n\nclip-path\n\n\nGenerator\n\n\nclip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);",
            "title": "Tags"
        },
        {
            "location": "/css-docs/tags/#background-images",
            "text": "",
            "title": "Background Images"
        },
        {
            "location": "/css-docs/tags/#background-image",
            "text": "background-image: url(path/to/img.jpg);\nbackground-image: linear-gradient(rgba(0, 0, 0, .7), rgba(0, 0, 0, .7)), url(path/to/img.jpg);",
            "title": "background-image"
        },
        {
            "location": "/css-docs/tags/#background-size",
            "text": "background-size: contain;\nbackground-size: cover;\nbackground-size: 30%;   contain : Scales the image as large as possible without cropping or stretching the image.  cover : Scales the image as large as possible without stretching the image. If the proportions of the image differ from the element, it is cropped either vertically or horizontally so that no empty space remains.",
            "title": "background-size"
        },
        {
            "location": "/css-docs/tags/#background-position",
            "text": "background-position: top;\nbackground-position: left;\nbackground-position: center;\nbackground-position: right 35% bottom 45%;",
            "title": "background-position"
        },
        {
            "location": "/css-docs/tags/#background-attatchment",
            "text": "// parallax effect\nbackground-attachment: fixed;",
            "title": "background-attatchment"
        },
        {
            "location": "/css-docs/tags/#position",
            "text": "",
            "title": "position"
        },
        {
            "location": "/css-docs/tags/#absolute",
            "text": "An absolutely positioned element is an element whose computed position value is absolute or fixed. The top, right, bottom, and left properties specify offsets from the edges of the element's containing block.  position: absolute;\ntop: 0px; left: 0px;",
            "title": "Absolute"
        },
        {
            "location": "/css-docs/tags/#transform",
            "text": "transform: translate(-50%, -50%);\ntransform: scale(2, 0.5);\ntransform: rotate(180deg);\ntransform: skew(30deg, 20deg);",
            "title": "transform"
        },
        {
            "location": "/css-docs/tags/#centering-with-transform",
            "text": ".container {\n    position: relative;\n}\n\n.box {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}",
            "title": "Centering with transform"
        },
        {
            "location": "/css-docs/tags/#transition",
            "text": ".button {\n    width: 100px;\n    transition: width 1s;\n}\n\n.button: hover {\n    width: 200px;\n}  .button {\n    background: white;\n    color: blue;\n\n    transition-property: background, color;\n    transition-duration: 1s, 1s;\n}\n\n.button:hover {\n    background: blue;\n    color: white;\n}",
            "title": "transition"
        },
        {
            "location": "/css-docs/tags/#media",
            "text": "@media only screen and (max-width: 1200px) {\n    p {\n        color: #fff;\n    }\n}",
            "title": "@media"
        },
        {
            "location": "/css-docs/tags/#clip-path",
            "text": "Generator  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);",
            "title": "clip-path"
        },
        {
            "location": "/css-docs/bootstrap/",
            "text": "Elements\n\n\nNavbar\n\n\nhere",
            "title": "Bootstrap"
        },
        {
            "location": "/css-docs/bootstrap/#elements",
            "text": "",
            "title": "Elements"
        },
        {
            "location": "/css-docs/bootstrap/#navbar",
            "text": "here",
            "title": "Navbar"
        },
        {
            "location": "/js/vanilla/",
            "text": "The tidbits and strange\n\n\nTruthy and Falsy\n\n\n\n\n\n\n\n\nValue\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nundefined\n\n\nfalse\n\n\n\n\n\n\nnull\n\n\nfalse\n\n\n\n\n\n\n0\n\n\nfalse\n\n\n\n\n\n\n''\n\n\nfalse\n\n\n\n\n\n\nNaN\n\n\nfalse\n\n\n\n\n\n\nEverything else\n\n\ntrue\n\n\n\n\n\n\n\n\nvar height; // undefined\n\nif(height) {\n    console.log(\"Height is defined\");\n} else {\n    console.log(\"Height is undefined\"); // result\n}\n\n\n\n\nCreating a function\n\n\nFunction declaration\n\n\nfunction doSomething(value) {\n    return (\"The given info is of type \" + (typeof value));\n}\n\nvar str = doSomething(12);\n\n\n\n\nFunction expression\n\n\nvar doSomething = function(value) {\n    return (\"The given info is of type \" + (typeof value));\n}\n\nvar str = doSomething(12);\n\n\n\n\nSelf-invoking (anonymous, IIFE)\n\n\nThis is useful when you don't want to reuse the function and need it to be in its own scope (for privacy)\n\n\n(function() {\n    alert(\"I run when the script is executed\");\n})();\n\n\n\n\nFirst Class Functions: Passing Functions as Arguments\n\n\nfunction arrayCalc(arr, fn) {\n    var arrRes = [];\n    for(var i = 0; i < arr.length; i++) {\n        arrRes.push(fn(arr[i]));\n    }\n    return arrRes;\n}\n\narrayCalc([1990, 2001, 1995, 1950, 1999], function(el) {\n    return 2018 - el;\n});\n\n\n\n\nFirst Class Functions: Functions Returning Functions\n\n\n// This is just an example, closures should be used for this scenario.\nfunction interviewQuestion(job) {\n    if(job === \"designer\") {\n        return function(name) { console.log(name + \", can you explain what UX design is?\") }\n    } else if(job === \"teacher\") {\n        return function(name) { console.log(\"What subject do you teach, \" + name + \"?\") }\n    } else {\n        return function(name) { console.log(\"Hello \" + name + \" what do you do?\")}\n    }\n}\n\nvar teacherQuestion = interviewQuestion('teacher');\nteacherQuestion(\"John\");\n\nquestion(\"designer\")(\"Mark\");\n\n\n\n\nClosures\n\n\nA closure gives you access to an outer function's cope from an inner function\n\n\nfunction retirement(retirementAge) {\n    var str = ' years left until retirement';\n    return function(dob) {\n        var age = 2018 - dob;\n        console.log((retirementAge - age) + a);\n    }\n}\n\nvar retirementUS = retirement(66);\nretirementUS(1990);\n\nretirement(66)(1940);\n\nvar retirementIceland = retirement(67);\n\n\n\n\nfunction score() {\n    var sc = 0;\n    return function(correct) {\n        if(correct) {\n            sc++;\n        }\n        return sc;\n    }\n}\n\nvar scoreKeeper = score();\nvar isCorrect = true;\nvar sc = scoreKeeper(isCorrect);\nconsole.log(sc);\n\n\n\n\nWhile the execution stack goes away once the outer function returns, its scope chain still sits in memory. When the inner function is called, its context is added to the execution stack. The new scope created for the inner function still has access to the outer scope.\n\n\nBind, call, and apply\n\n\nvar john = {\n    name: \"John\",\n    age: 26,\n    job: '\"teacher',\n    presentation: function(Style, timeOfDay) {\n        if(tyle === 'formal') {\n            console.log(\"Good \" + timeOfDay + \", ladies and gentlement! I\\'m \" + this.name + \", I\\'m a \" + this.job);\n        } else if(style === 'friendly') {\n            console.log(\"Hey! What\\'s up?\");\n        }\n    }\n}\n\nvar emily = {\n    name: 'Emily',\n    age: 35,\n    job: 'designer'\n}\n\n// These two methods set the this variable but imedietly call the function\njohn.presentation.call(emily, 'friendly', 'afternoon'); // replaces this variable with emily. This is method borrowing.\njohn.presentation.apply(emily, ['friendly', 'afternoon']); // won't work in this example since it doesn't take an array\n\n// Bind will set the this variable but returns a function that can be called at a later point. This is known as currying (creating a function based on another but with preset parameters)\nvar johnFriendly = john.presentation.bind(john, 'friendly');\njohnFriendly(\"morning\");\n\nvar emilyFormal = john.presentation.bind(emily, \"formal\");\n\n\n\n\nfunction arrayCalc(arr, fn) {\n    var arrRes = [];\n    for(var i = 0; i < arr.length; i++) {\n        arrRes.push(fn(arr[i]));\n    }\n}\n\nfunction isFullAge(limit, el) {\n    return el >= limit;\n}\n\nvar fullJapan = arrayCalc(ages, isFullAge.bind(this, 20));\n\n\n\n\nExecution Context\n\n\nExecution Context\n\n\nA container that stores a section of code along with variables. The default is the global execution context. It contains code that is \nnot inside any functions\n and is associated with the \nglobal object (window in browsers)\n (lastName === window.lastName). When a function is called, \na new execution context is created\n and goes on top of the execution stack. If a function is called within a function, it will jump to execute second function's code and return back to the first function when it is done executing the new stack.\n\n\nExecution Context Object\n\n\nEach execution content \ncontains an object\n. The object contains the Variable Object (VO), scope chain, and \"this\". The execution context is created in two stages\n\n\n\n\nCreation phase\n\n\nCreation of the VO\n\n\nThe argument object is created, containing all the arguments that were passed into the function.\n\n\nCode is scanned for \nfunction declarations:\n for each function, a property is created in the VO, \npointing to the function\n.\n\n\nCode is scanned for \nvariable declarations:\n for each variable, a property is created in the VO, and set to undefined.\n\n\nThese last two points are what is known as hoisting. Functions are already defined when the execution phase starts, variables are not\n\n\n\n\n\n\nCreation of the scope chain\n\n\nEach new function creates a scope:\n the space/environment in which the variables it defines are accessible. Scopes are not created though if statements, while loops, or for loops.\n\n\nLexical scoping:\n a function that is lexically within another function gets access to the scope of the outer function.\n\n\n\n\n\n\nDetermine value of the 'this' variable\n\n\n\n\n\n\nExecution phase\n\n\nThe code of the function that generated the current execution context is ran line by line\n\n\n\n\n\n\n\n\n1.1 Creation of the VO (Hoisting)\n\n\n// Executes\ndoSomething();\nfunction doSomething() {\n    console.log(\"foo\");\n}\n\n// TypeError\ndoSomething2();\nvar doSomething2 = function() {\n    console.log(\"foo\");\n}\n\n// Undefined\nconsole.log(a);\nvar a = 5;\n\n// ReferenceError\nconsole.log(b);\n\n\n\n\n1.2 Creation of the Scope Chain\n\n\nExecution Stack\n\n\nvar a = \"Hello\"; // Global scope\nfirst();\n\nfunction first() { // first() scope, has access to parent scope (global and a)\n    var b = \"Hi!\";\n    second();\n\n    function second() { // second() scope, has access to parent scope (first and global)\n        var c = \"Hey!\";\n        console.log(a + b + c);\n    }\n}\n\n\n\n\nScope Chain\n\n\nvar a = \"Hello\"; // Global scope\nfirst();\n\nfunction first() { // first() scope, has access to parent scope (global and a)\n    var b = \"Hi!\";\n    second();\n\n    function second() { // second() scope, has access to parent scope (first and global)\n        var c = \"Hey!\";\n        third();\n    }\n}\n\nfunction third() { // Can only access a, not b and c\n    var d = \"John\";\n    console.log(a + b + c + d);\n}\n\n\n\n\n1.3 this\n\n\n\n\nRegular function call:\n the this keyword points at the global object (the window object in the browser)\n\n\nMethod call:\n the this variable points to the object that is calling the method\n\n\nThe this keyword is not assigned a value until a function where it is defined is actually called\n\n\n\n\n\nfunction printThis() {\n    console.log(this);\n} // returns the global object\n\nvar john = {\n    name: 'John',\n    dob: '1990',\n    printThis: function() {\n        console.log(this);\n\n        function innerFunc() {\n            console.log(this);\n        } // returns the global object (regular function call)\n        innerFunc();\n    } // returns the object john (method call)\n}\n\n\n\n\nObjects\n\n\n(almost) everything is an object\n\n\n\n\n\n\n\n\nPrimitives\n\n\nEverything Else\n\n\n\n\n\n\n\n\n\n\nNumbers\n\n\nArrays\n\n\n\n\n\n\nStrings\n\n\nFunctions\n\n\n\n\n\n\nBooleans\n\n\nObjects\n\n\n\n\n\n\nUndefined\n\n\nDates\n\n\n\n\n\n\nNull\n\n\nWrappers for Numbers, Strings, Booleans\n\n\n\n\n\n\n\n\nAnd everything else is an object\n\n\n\n\n\n\n\n\n\n\nEvery JavaScript object has a \nprototype property\n, which makes inheritance possible in JavaScript\n\n\nThe prototype property of an object is where we put methods and properties that we want \nother objects to inherit\n\n\nThe Constructor's prototype property is \nNOT\n the prototype of the Constructor itself, it's the prototype of \nALL\n instances that are created through it\n\n\nWhen a certain method (or property) is called, the search starts in the object itself, and if it cannot be found, the search moves on to the object's prototype. This continues until the method is found. This is the \nprototype chain\n\n\n\n\nExample with Function Constructors\n\n\nvar Person = function(name, dob, job) {\n    this.name = name;\n    this.dob = dob;\n    this.job = job;\n    this.calculateAge = function() {\n        console.log(2018 - this.dob);\n    }\n}\n\nPerson.prototype.calculateAge2 = function() {\n    console.log(2018 - this.dob);\n}\nPerson.prototype.lastName = 'Smith';\n\nvar john = new Person(\"John\", 1990, \"Teacher\");\n\n\n\n\n\n\nNew creates a new empty object.\n\n\nThe function is called\n\n\nNew Execution Environment is created along with its this variable.\n\n\nthis points to the empty object due to the new keyword\n\n\n\n\n\n\nthis.name attaches the variables to the new object\n\n\n\n\nAn array has the length property and its prototype contains functions such as slice, pop, push, and toString\n\n\nExample with Object.create\n\n\nvar personProto = {\n    calculateAge: function() {\n        console.log(2018 - this.dob);\n    }\n}\n\n// first method of using create\nvar john = Object.create(personProto);\njohn.name = \"John\";\njohn.dob = 1990;\njohn.job = \"Teacher\";\n\n// second method of using create\nvar jane = Object.create(personProto, {\n    name: { value: 'Jane' },\n    dob: { value: 1969},\n    job : { value: 'designer'}\n});",
            "title": "Vanilla"
        },
        {
            "location": "/js/vanilla/#the-tidbits-and-strange",
            "text": "",
            "title": "The tidbits and strange"
        },
        {
            "location": "/js/vanilla/#truthy-and-falsy",
            "text": "Value  Result      undefined  false    null  false    0  false    ''  false    NaN  false    Everything else  true     var height; // undefined\n\nif(height) {\n    console.log(\"Height is defined\");\n} else {\n    console.log(\"Height is undefined\"); // result\n}",
            "title": "Truthy and Falsy"
        },
        {
            "location": "/js/vanilla/#creating-a-function",
            "text": "",
            "title": "Creating a function"
        },
        {
            "location": "/js/vanilla/#function-declaration",
            "text": "function doSomething(value) {\n    return (\"The given info is of type \" + (typeof value));\n}\n\nvar str = doSomething(12);",
            "title": "Function declaration"
        },
        {
            "location": "/js/vanilla/#function-expression",
            "text": "var doSomething = function(value) {\n    return (\"The given info is of type \" + (typeof value));\n}\n\nvar str = doSomething(12);",
            "title": "Function expression"
        },
        {
            "location": "/js/vanilla/#self-invoking-anonymous-iife",
            "text": "This is useful when you don't want to reuse the function and need it to be in its own scope (for privacy)  (function() {\n    alert(\"I run when the script is executed\");\n})();",
            "title": "Self-invoking (anonymous, IIFE)"
        },
        {
            "location": "/js/vanilla/#first-class-functions-passing-functions-as-arguments",
            "text": "function arrayCalc(arr, fn) {\n    var arrRes = [];\n    for(var i = 0; i < arr.length; i++) {\n        arrRes.push(fn(arr[i]));\n    }\n    return arrRes;\n}\n\narrayCalc([1990, 2001, 1995, 1950, 1999], function(el) {\n    return 2018 - el;\n});",
            "title": "First Class Functions: Passing Functions as Arguments"
        },
        {
            "location": "/js/vanilla/#first-class-functions-functions-returning-functions",
            "text": "// This is just an example, closures should be used for this scenario.\nfunction interviewQuestion(job) {\n    if(job === \"designer\") {\n        return function(name) { console.log(name + \", can you explain what UX design is?\") }\n    } else if(job === \"teacher\") {\n        return function(name) { console.log(\"What subject do you teach, \" + name + \"?\") }\n    } else {\n        return function(name) { console.log(\"Hello \" + name + \" what do you do?\")}\n    }\n}\n\nvar teacherQuestion = interviewQuestion('teacher');\nteacherQuestion(\"John\");\n\nquestion(\"designer\")(\"Mark\");",
            "title": "First Class Functions: Functions Returning Functions"
        },
        {
            "location": "/js/vanilla/#closures",
            "text": "A closure gives you access to an outer function's cope from an inner function  function retirement(retirementAge) {\n    var str = ' years left until retirement';\n    return function(dob) {\n        var age = 2018 - dob;\n        console.log((retirementAge - age) + a);\n    }\n}\n\nvar retirementUS = retirement(66);\nretirementUS(1990);\n\nretirement(66)(1940);\n\nvar retirementIceland = retirement(67);  function score() {\n    var sc = 0;\n    return function(correct) {\n        if(correct) {\n            sc++;\n        }\n        return sc;\n    }\n}\n\nvar scoreKeeper = score();\nvar isCorrect = true;\nvar sc = scoreKeeper(isCorrect);\nconsole.log(sc);  While the execution stack goes away once the outer function returns, its scope chain still sits in memory. When the inner function is called, its context is added to the execution stack. The new scope created for the inner function still has access to the outer scope.",
            "title": "Closures"
        },
        {
            "location": "/js/vanilla/#bind-call-and-apply",
            "text": "var john = {\n    name: \"John\",\n    age: 26,\n    job: '\"teacher',\n    presentation: function(Style, timeOfDay) {\n        if(tyle === 'formal') {\n            console.log(\"Good \" + timeOfDay + \", ladies and gentlement! I\\'m \" + this.name + \", I\\'m a \" + this.job);\n        } else if(style === 'friendly') {\n            console.log(\"Hey! What\\'s up?\");\n        }\n    }\n}\n\nvar emily = {\n    name: 'Emily',\n    age: 35,\n    job: 'designer'\n}\n\n// These two methods set the this variable but imedietly call the function\njohn.presentation.call(emily, 'friendly', 'afternoon'); // replaces this variable with emily. This is method borrowing.\njohn.presentation.apply(emily, ['friendly', 'afternoon']); // won't work in this example since it doesn't take an array\n\n// Bind will set the this variable but returns a function that can be called at a later point. This is known as currying (creating a function based on another but with preset parameters)\nvar johnFriendly = john.presentation.bind(john, 'friendly');\njohnFriendly(\"morning\");\n\nvar emilyFormal = john.presentation.bind(emily, \"formal\");  function arrayCalc(arr, fn) {\n    var arrRes = [];\n    for(var i = 0; i < arr.length; i++) {\n        arrRes.push(fn(arr[i]));\n    }\n}\n\nfunction isFullAge(limit, el) {\n    return el >= limit;\n}\n\nvar fullJapan = arrayCalc(ages, isFullAge.bind(this, 20));",
            "title": "Bind, call, and apply"
        },
        {
            "location": "/js/vanilla/#execution-context",
            "text": "",
            "title": "Execution Context"
        },
        {
            "location": "/js/vanilla/#execution-context_1",
            "text": "A container that stores a section of code along with variables. The default is the global execution context. It contains code that is  not inside any functions  and is associated with the  global object (window in browsers)  (lastName === window.lastName). When a function is called,  a new execution context is created  and goes on top of the execution stack. If a function is called within a function, it will jump to execute second function's code and return back to the first function when it is done executing the new stack.",
            "title": "Execution Context"
        },
        {
            "location": "/js/vanilla/#execution-context-object",
            "text": "Each execution content  contains an object . The object contains the Variable Object (VO), scope chain, and \"this\". The execution context is created in two stages   Creation phase  Creation of the VO  The argument object is created, containing all the arguments that were passed into the function.  Code is scanned for  function declarations:  for each function, a property is created in the VO,  pointing to the function .  Code is scanned for  variable declarations:  for each variable, a property is created in the VO, and set to undefined.  These last two points are what is known as hoisting. Functions are already defined when the execution phase starts, variables are not    Creation of the scope chain  Each new function creates a scope:  the space/environment in which the variables it defines are accessible. Scopes are not created though if statements, while loops, or for loops.  Lexical scoping:  a function that is lexically within another function gets access to the scope of the outer function.    Determine value of the 'this' variable    Execution phase  The code of the function that generated the current execution context is ran line by line",
            "title": "Execution Context Object"
        },
        {
            "location": "/js/vanilla/#11-creation-of-the-vo-hoisting",
            "text": "// Executes\ndoSomething();\nfunction doSomething() {\n    console.log(\"foo\");\n}\n\n// TypeError\ndoSomething2();\nvar doSomething2 = function() {\n    console.log(\"foo\");\n}\n\n// Undefined\nconsole.log(a);\nvar a = 5;\n\n// ReferenceError\nconsole.log(b);",
            "title": "1.1 Creation of the VO (Hoisting)"
        },
        {
            "location": "/js/vanilla/#12-creation-of-the-scope-chain",
            "text": "",
            "title": "1.2 Creation of the Scope Chain"
        },
        {
            "location": "/js/vanilla/#execution-stack",
            "text": "var a = \"Hello\"; // Global scope\nfirst();\n\nfunction first() { // first() scope, has access to parent scope (global and a)\n    var b = \"Hi!\";\n    second();\n\n    function second() { // second() scope, has access to parent scope (first and global)\n        var c = \"Hey!\";\n        console.log(a + b + c);\n    }\n}",
            "title": "Execution Stack"
        },
        {
            "location": "/js/vanilla/#scope-chain",
            "text": "var a = \"Hello\"; // Global scope\nfirst();\n\nfunction first() { // first() scope, has access to parent scope (global and a)\n    var b = \"Hi!\";\n    second();\n\n    function second() { // second() scope, has access to parent scope (first and global)\n        var c = \"Hey!\";\n        third();\n    }\n}\n\nfunction third() { // Can only access a, not b and c\n    var d = \"John\";\n    console.log(a + b + c + d);\n}",
            "title": "Scope Chain"
        },
        {
            "location": "/js/vanilla/#13-this",
            "text": "Regular function call:  the this keyword points at the global object (the window object in the browser)  Method call:  the this variable points to the object that is calling the method  The this keyword is not assigned a value until a function where it is defined is actually called   \nfunction printThis() {\n    console.log(this);\n} // returns the global object\n\nvar john = {\n    name: 'John',\n    dob: '1990',\n    printThis: function() {\n        console.log(this);\n\n        function innerFunc() {\n            console.log(this);\n        } // returns the global object (regular function call)\n        innerFunc();\n    } // returns the object john (method call)\n}",
            "title": "1.3 this"
        },
        {
            "location": "/js/vanilla/#objects",
            "text": "(almost) everything is an object     Primitives  Everything Else      Numbers  Arrays    Strings  Functions    Booleans  Objects    Undefined  Dates    Null  Wrappers for Numbers, Strings, Booleans     And everything else is an object      Every JavaScript object has a  prototype property , which makes inheritance possible in JavaScript  The prototype property of an object is where we put methods and properties that we want  other objects to inherit  The Constructor's prototype property is  NOT  the prototype of the Constructor itself, it's the prototype of  ALL  instances that are created through it  When a certain method (or property) is called, the search starts in the object itself, and if it cannot be found, the search moves on to the object's prototype. This continues until the method is found. This is the  prototype chain",
            "title": "Objects"
        },
        {
            "location": "/js/vanilla/#example-with-function-constructors",
            "text": "var Person = function(name, dob, job) {\n    this.name = name;\n    this.dob = dob;\n    this.job = job;\n    this.calculateAge = function() {\n        console.log(2018 - this.dob);\n    }\n}\n\nPerson.prototype.calculateAge2 = function() {\n    console.log(2018 - this.dob);\n}\nPerson.prototype.lastName = 'Smith';\n\nvar john = new Person(\"John\", 1990, \"Teacher\");   New creates a new empty object.  The function is called  New Execution Environment is created along with its this variable.  this points to the empty object due to the new keyword    this.name attaches the variables to the new object   An array has the length property and its prototype contains functions such as slice, pop, push, and toString",
            "title": "Example with Function Constructors"
        },
        {
            "location": "/js/vanilla/#example-with-objectcreate",
            "text": "var personProto = {\n    calculateAge: function() {\n        console.log(2018 - this.dob);\n    }\n}\n\n// first method of using create\nvar john = Object.create(personProto);\njohn.name = \"John\";\njohn.dob = 1990;\njohn.job = \"Teacher\";\n\n// second method of using create\nvar jane = Object.create(personProto, {\n    name: { value: 'Jane' },\n    dob: { value: 1969},\n    job : { value: 'designer'}\n});",
            "title": "Example with Object.create"
        },
        {
            "location": "/js/es6/",
            "text": "Variables and Data\n\n\nLet and Const\n\n\n\n\nconst\n is \nimutable\n (unchangable)\n\n\nlet\n is \nmutable\n (changeable)\n\n\n\n\n// ES5\nvar name5 = 'Jane Smith';\nvar age5 = 23;\nname5 = 'Jane Miller';\n\n// ES6\nconst name6 = \"Jane Smith\"; // Imutable (can't change)\nlet age = 23; // Can mutate\n\nname6 = \"Jane Miller\" // TypeError\n\n\n\n\n\n\nVariables declared with \nvar\n are \nfunction scoped\n\n\nVariables declared with \nlet\n or \nconst\n are \nblock scoped\n\n\n\n\n// ES5\nfunction driversLicence(passedTest) { // New function\n    if(passedTest) {\n        var firstName = 'John';\n        var dob = 1990;\n\n    }\n    console.log(firstName + \", born in \" + dob + \" can now drive\");\n}\ndriversLicence(true);\n\n//ES6\nfunction driversLicence(passedTest) { // New block and function\n    if(passedTest) { // New block\n        let firstName = 'John';\n        const dob = 1990;\n    }\n    console.log(firstName + \", born in \" + dob + \" can now drive\");\n}\ndriversLicence(true); // Failes, let and const are blocked scoped (created by {}) while var is created by new functions\n\n\n\n\nlet i = 23;\n\nfor(let i = 0; i < 5; i++) {\n    console.log(i);\n}\nconsole.log(i);\n\n// 0, 1, 2, 3, 4, 23\n// Both i's are different variables\n\n\n\n\n\n\nvar\n is set to undefined during the creation of the variable object in the creation phase\n\n\nlet\n will not let you use a variable if it hasn't been created yet. (It will through a ReferenceError instead of being undefined)\n\n\n\n\nDestructuring\n\n\n// ==========\n// Arrays\n// ==========\nvar john = ['John', 26];\nvar name5 = john[0];\nvar age5 = john[1];\n\nconst [name6, age6] = ['John', 26];\n\n// ==========\n// Objects\n// ==========\nconst obj = {\n    firstName: 'John',\n    lastName: 'Smith'\n};\n// The keys must match\nconst {firstName, lastName} = obj;\n\n// Keys don't have to match\nconst {firstName: a, lastName: b} = obj;\n\n// ==============================\n// Functions returning objects\n// ==============================\nfunction calcAgeRetirement(year) {\n    const age = new Date().getFullYear() - year;\n    return [age, 65 - age];\n}\nconst [age, retirement] = calcAgeRetirement(1990);\n\n\n\n\n\nStrings\n\n\nTemplate Literals\n\n\nlet firstName = \"john\";\nlet lastName = \"Smith\";\nconst dob = 1990;\n\nfunction calcAge(year) {\n    return 2018 - year;\n}\n\n//ES5\nvar str = 'This is ' + firstName + ' ' + lastName + ' who was born in ' + dob + '. Today, he is ' + calcAge(dob) + ' years old';\n\n//ES6\nlet str = `This is ${firstName} ${lastName} who was born in ${dob}. Today, he is ${calcAge(dob)} years old`; \n\n\n\n\nString Methods\n\n\nconst str = \"John Smith\"\nn.startsWith('J');\nn.endsWith('th');\nn.includes('oh');\nstr.repeat(5);\n\n\n\n\nArrays\n\n\nNodelist to Array\n\n\nconst boxes = document.querySelectorAll('.box');\n\n// ES5\nvar boxesArr5 = Array.prototype.slice.call(boxes);\nboxesArr5.forEach(function(cur) {\n    cur.style.backgroundColor = 'dodgerblue';\n});\n\n//ES6\nconst boxesArr6 = Array.from(boxes);\nboxesArr6.forEach(cur => cur.style.backgroundColor = 'dodgerblue');\n\n\n\n\nSpread\n\n\nfunction addFourAges(a, b, c, d) {\n    return a + b + c + d;\n}\n\nvar ages = [18, 30, 12, 21];\n\n// ES5\nvar sum5 = addFourAges.apply(null, ages);\n\n// ES6\nvar sum6 = addFourAges(...ages);\n\n\n\n\nconst familySmith = ['John', 'Jane', 'Mark'];\nconst familyMiller = ['Mary', 'Bob', 'Ann'];\nconst bigFamily = [...familySmith, ...familyMiller];\n\n\n\n\nLoops\n\n\n\n// ES5\nvar boxesArr5 = Array.prototype.slice.call(boxes);\nfor(var i = 0; i < boxesArr5.length; i++) {\n    if (boxesArr5[i].className === 'box blue') {\n        continue;\n    }\n    boxesArr5[i].textContent = 'I changed to blue';\n}\n\n// ES6\nconst boxesArr6 = Array.from(boxes);\nfor (const cur of boxesArr6) {\n    if (cur.className.includes('blue')) {\n        continue;\n    }\n    cur.textContent = 'I changes to blue';\n}\n// Allows us to use break or continue\n\n\n\n\nFinding Items\n\n\nvar ages = [12, 17, 8, 21, 14, 11];\n\n// ES5\nvar full = ages.map(function(cur) {\n    return cur >= 18;\n});\nvar age = ages[full.indexOf(true)];\n\n// ES6\nages.findIndex(cur => cur >= 18); // returns 3\nages.find(cur => cur >= 18); // returns 21\n\n\n\n\nFunctions\n\n\nBlocks and IIFEs\n\n\n{\n    const a = 1;\n    let b = 2;\n    var c = 3;\n} // new block is created\n\nconsole.log(a + b); // ReferenceError\nconsole.log(c); // Success\n\n\n\n\nArrow Functions\n\n\nThe arrow function allows callback functions to be written with less code.\n\n\nconst years = [1990, 1995, 1982, 1937];\n\n//ES5\nvar ages5 = years.map(function(el) {\n    return 2018 - el;\n});\n\n//ES6\nlet ages6 = years.map(el => 2018 - el);\n\nages6 = years.map((el, indx) => `Age element ${indx+1}: ${2018-el}.`);\n\nages6 = years.map((el, indx) => {\n    const now = new Date().getFullYear();\n    const age = now - el;\n});\n\n\n\n\nArrow functions do not have their own 'this' keyword. (methods have their own 'this' while function's 'this' refers to the global object)\n\n\n// ES5\nvar box5 {\n    color: 'green',\n    position: 1,\n    clickMe: function() {\n        var self = this; // Fixes the problem\n        document.querySelector('.green').addEventListener('click', function() {\n            var str = 'This is box number ' + this.position + ' and it is ' + this.color;\n        });\n    }\n}\nbox5.clickMe(); // Returns undeinfed undefined. The callback function is a regular function and so this points to the global object\n\n//ES6\nconst box6 {\n    color: 'green',\n    position: 1,\n    clickMe: function() {\n        document.querySelector('.green').addEventListener('click', () => {\n            var str = `This is box number ${position} and it is ${green}`;\n        });\n    }\n}\nbox6.clickMe(); // Returns 1 green. This works because the value of this is preserved.\n\n\n\n\nfunction Person(name) {\n    this.name = name;\n}\n\n// ES5\nPerson.prototype.myFriends5 = function(friends) {\n    var arr = friends.map(function(el) { // This changes this to point to the global object\n        return this.name + ' is friends with ' + el;\n    }.bind(this)); // bind fixes the problem\n}\n\nvar friends = ['Bob', 'Jane', 'Mark'];\nnew Person('John').myFriends5(friends);\n\n// ES6\nPerson.prototype.myFriends6 = function(friends) {\n    let arr = friends.map(el => `${this.name} is friends with ${el}`);\n}\n\nvar friends = ['Bob', 'Jane', 'Mark'];\nnew Person('John').myFriends6(friends);\n\n\n\n\nRest Parameters\n\n\n// ES5\nfunction isFullAge5() {\n    var argsArr = Array.prototype.slice.call(arguments);\n    argsArr.forEach(function(age) {\n        console.log((2018 - age) >= 18);\n    });\n}\nisFullAge5(1990, 1999, 1965);\n\n// ES6\nfunction isFullAge6(limit, ...years) {\n    years.forEach(age => console.log((2018 - age) >= limit));\n}\nisFullAge6(25, 1990, 1999, 1965);\n\n\n\n\nDefault Parameters\n\n\nfunction SmithPerson(firstName, dob, lastName='Smith') {\n    this.firstName = firstName;\n    this.dob = dob;\n    this.lastName = lastName;\n}\n\n\n\n\nPromises\n\n\nvar p1 = new Promise((resolve, reject) => {\n    const num = Math.random();\n    if (num < 0.5) {\n        resolve(num);\n    } else {\n        reject(num);\n    }\n});\n\np1.then(result => {\n    console.log(`Success: ${result}`);\n}).catch(err => {\n    console.log(`Error: ${err}`);   \n});\n\n\n\n\nAsync/Await\n\n\n// getIDs and getRecipe from previous block\nasync function getRecipiesAW() {\n    const IDs = await getIDs;\n    const recipe = await getRecipe(IDs[2]);\n\n    return recipe;\n}\n\ngetRecipiesAW().then(result => console.log(result));\n\n\n\n\nAJAX\n\n\nWith XMLHTTPRequest\n\n\nreadyState\n\n\n\n\n\n\n\n\nValue\n\n\nState\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nUNSENT\n\n\nClient has been created. open() not called yet.\n\n\n\n\n\n\n1\n\n\nOPENED\n\n\nopen() has been called\n\n\n\n\n\n\n2\n\n\nHEADERS_RECEIVED\n\n\nsend() has been called, and headers and status are available\n\n\n\n\n\n\n3\n\n\nLOADING\n\n\nDownloading; responseText holds partial data.\n\n\n\n\n\n\n4\n\n\nDONE\n\n\nThe operation is complete\n\n\n\n\n\n\n\n\nExample\n\n\nconst XHR = new XMLHttpRequest();\nXHR.onreadystatechange = () => {\n    if (XHR.readyState === 4) {\n        console.log(`readyState: ${XHR.readyState}`);\n        if(XHR.status === 200) {\n            const url = JSON.parse(XHR.responseText).message;\n            console.log(url);\n        } else {\n            console.log(\"There was a problem\")\n        }\n    }\n};\nXHR.open(\"GET\", \"https://dog.ceo/api/breeds/image/random\");\nXHR.send();\n\n\n\n\nWith Fetch (updated XHR)\n\n\n// .json() will return a promise that can be chained\nfetch('https://api.coindesk.com/v1/bpi/currentprice.json').then(response => {\n    console.log(`Response: ${response}`);\n    return response.json();\n}).then(data => {\n    console.log(data);\n}).catch(err => {\n    console.log(err);\n});\n\n\n\n\nOptions\n\n\nfetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n        name: 'blue',\n        login: 'bluecat'    \n    })\n}).then(response => {\n\n}).catch(err => {\n\n});\n\n\n\n\nError Handling\n\n\nfetch(url).then(response => {\n    if(!response.ok) {\n        throw Error(\"Custom error\");\n    }\n    return response;\n}).then(goodResponse => {\n    console.log(\"ok\");  \n}).catch(err => {\n    console.log(err);\n});\n\n\n\n\nWith Axios\n\n\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n\n\n\naxios.get(url).then(res => {\n    console.log(res);\n}).catch(err => {\n    console.log(err);\n});",
            "title": "ES6"
        },
        {
            "location": "/js/es6/#variables-and-data",
            "text": "",
            "title": "Variables and Data"
        },
        {
            "location": "/js/es6/#let-and-const",
            "text": "const  is  imutable  (unchangable)  let  is  mutable  (changeable)   // ES5\nvar name5 = 'Jane Smith';\nvar age5 = 23;\nname5 = 'Jane Miller';\n\n// ES6\nconst name6 = \"Jane Smith\"; // Imutable (can't change)\nlet age = 23; // Can mutate\n\nname6 = \"Jane Miller\" // TypeError   Variables declared with  var  are  function scoped  Variables declared with  let  or  const  are  block scoped   // ES5\nfunction driversLicence(passedTest) { // New function\n    if(passedTest) {\n        var firstName = 'John';\n        var dob = 1990;\n\n    }\n    console.log(firstName + \", born in \" + dob + \" can now drive\");\n}\ndriversLicence(true);\n\n//ES6\nfunction driversLicence(passedTest) { // New block and function\n    if(passedTest) { // New block\n        let firstName = 'John';\n        const dob = 1990;\n    }\n    console.log(firstName + \", born in \" + dob + \" can now drive\");\n}\ndriversLicence(true); // Failes, let and const are blocked scoped (created by {}) while var is created by new functions  let i = 23;\n\nfor(let i = 0; i < 5; i++) {\n    console.log(i);\n}\nconsole.log(i);\n\n// 0, 1, 2, 3, 4, 23\n// Both i's are different variables   var  is set to undefined during the creation of the variable object in the creation phase  let  will not let you use a variable if it hasn't been created yet. (It will through a ReferenceError instead of being undefined)",
            "title": "Let and Const"
        },
        {
            "location": "/js/es6/#destructuring",
            "text": "// ==========\n// Arrays\n// ==========\nvar john = ['John', 26];\nvar name5 = john[0];\nvar age5 = john[1];\n\nconst [name6, age6] = ['John', 26];\n\n// ==========\n// Objects\n// ==========\nconst obj = {\n    firstName: 'John',\n    lastName: 'Smith'\n};\n// The keys must match\nconst {firstName, lastName} = obj;\n\n// Keys don't have to match\nconst {firstName: a, lastName: b} = obj;\n\n// ==============================\n// Functions returning objects\n// ==============================\nfunction calcAgeRetirement(year) {\n    const age = new Date().getFullYear() - year;\n    return [age, 65 - age];\n}\nconst [age, retirement] = calcAgeRetirement(1990);",
            "title": "Destructuring"
        },
        {
            "location": "/js/es6/#strings",
            "text": "",
            "title": "Strings"
        },
        {
            "location": "/js/es6/#template-literals",
            "text": "let firstName = \"john\";\nlet lastName = \"Smith\";\nconst dob = 1990;\n\nfunction calcAge(year) {\n    return 2018 - year;\n}\n\n//ES5\nvar str = 'This is ' + firstName + ' ' + lastName + ' who was born in ' + dob + '. Today, he is ' + calcAge(dob) + ' years old';\n\n//ES6\nlet str = `This is ${firstName} ${lastName} who was born in ${dob}. Today, he is ${calcAge(dob)} years old`;",
            "title": "Template Literals"
        },
        {
            "location": "/js/es6/#string-methods",
            "text": "const str = \"John Smith\"\nn.startsWith('J');\nn.endsWith('th');\nn.includes('oh');\nstr.repeat(5);",
            "title": "String Methods"
        },
        {
            "location": "/js/es6/#arrays",
            "text": "",
            "title": "Arrays"
        },
        {
            "location": "/js/es6/#nodelist-to-array",
            "text": "const boxes = document.querySelectorAll('.box');\n\n// ES5\nvar boxesArr5 = Array.prototype.slice.call(boxes);\nboxesArr5.forEach(function(cur) {\n    cur.style.backgroundColor = 'dodgerblue';\n});\n\n//ES6\nconst boxesArr6 = Array.from(boxes);\nboxesArr6.forEach(cur => cur.style.backgroundColor = 'dodgerblue');",
            "title": "Nodelist to Array"
        },
        {
            "location": "/js/es6/#spread",
            "text": "function addFourAges(a, b, c, d) {\n    return a + b + c + d;\n}\n\nvar ages = [18, 30, 12, 21];\n\n// ES5\nvar sum5 = addFourAges.apply(null, ages);\n\n// ES6\nvar sum6 = addFourAges(...ages);  const familySmith = ['John', 'Jane', 'Mark'];\nconst familyMiller = ['Mary', 'Bob', 'Ann'];\nconst bigFamily = [...familySmith, ...familyMiller];",
            "title": "Spread"
        },
        {
            "location": "/js/es6/#loops",
            "text": "// ES5\nvar boxesArr5 = Array.prototype.slice.call(boxes);\nfor(var i = 0; i < boxesArr5.length; i++) {\n    if (boxesArr5[i].className === 'box blue') {\n        continue;\n    }\n    boxesArr5[i].textContent = 'I changed to blue';\n}\n\n// ES6\nconst boxesArr6 = Array.from(boxes);\nfor (const cur of boxesArr6) {\n    if (cur.className.includes('blue')) {\n        continue;\n    }\n    cur.textContent = 'I changes to blue';\n}\n// Allows us to use break or continue",
            "title": "Loops"
        },
        {
            "location": "/js/es6/#finding-items",
            "text": "var ages = [12, 17, 8, 21, 14, 11];\n\n// ES5\nvar full = ages.map(function(cur) {\n    return cur >= 18;\n});\nvar age = ages[full.indexOf(true)];\n\n// ES6\nages.findIndex(cur => cur >= 18); // returns 3\nages.find(cur => cur >= 18); // returns 21",
            "title": "Finding Items"
        },
        {
            "location": "/js/es6/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/js/es6/#blocks-and-iifes",
            "text": "{\n    const a = 1;\n    let b = 2;\n    var c = 3;\n} // new block is created\n\nconsole.log(a + b); // ReferenceError\nconsole.log(c); // Success",
            "title": "Blocks and IIFEs"
        },
        {
            "location": "/js/es6/#arrow-functions",
            "text": "The arrow function allows callback functions to be written with less code.  const years = [1990, 1995, 1982, 1937];\n\n//ES5\nvar ages5 = years.map(function(el) {\n    return 2018 - el;\n});\n\n//ES6\nlet ages6 = years.map(el => 2018 - el);\n\nages6 = years.map((el, indx) => `Age element ${indx+1}: ${2018-el}.`);\n\nages6 = years.map((el, indx) => {\n    const now = new Date().getFullYear();\n    const age = now - el;\n});  Arrow functions do not have their own 'this' keyword. (methods have their own 'this' while function's 'this' refers to the global object)  // ES5\nvar box5 {\n    color: 'green',\n    position: 1,\n    clickMe: function() {\n        var self = this; // Fixes the problem\n        document.querySelector('.green').addEventListener('click', function() {\n            var str = 'This is box number ' + this.position + ' and it is ' + this.color;\n        });\n    }\n}\nbox5.clickMe(); // Returns undeinfed undefined. The callback function is a regular function and so this points to the global object\n\n//ES6\nconst box6 {\n    color: 'green',\n    position: 1,\n    clickMe: function() {\n        document.querySelector('.green').addEventListener('click', () => {\n            var str = `This is box number ${position} and it is ${green}`;\n        });\n    }\n}\nbox6.clickMe(); // Returns 1 green. This works because the value of this is preserved.  function Person(name) {\n    this.name = name;\n}\n\n// ES5\nPerson.prototype.myFriends5 = function(friends) {\n    var arr = friends.map(function(el) { // This changes this to point to the global object\n        return this.name + ' is friends with ' + el;\n    }.bind(this)); // bind fixes the problem\n}\n\nvar friends = ['Bob', 'Jane', 'Mark'];\nnew Person('John').myFriends5(friends);\n\n// ES6\nPerson.prototype.myFriends6 = function(friends) {\n    let arr = friends.map(el => `${this.name} is friends with ${el}`);\n}\n\nvar friends = ['Bob', 'Jane', 'Mark'];\nnew Person('John').myFriends6(friends);",
            "title": "Arrow Functions"
        },
        {
            "location": "/js/es6/#rest-parameters",
            "text": "// ES5\nfunction isFullAge5() {\n    var argsArr = Array.prototype.slice.call(arguments);\n    argsArr.forEach(function(age) {\n        console.log((2018 - age) >= 18);\n    });\n}\nisFullAge5(1990, 1999, 1965);\n\n// ES6\nfunction isFullAge6(limit, ...years) {\n    years.forEach(age => console.log((2018 - age) >= limit));\n}\nisFullAge6(25, 1990, 1999, 1965);",
            "title": "Rest Parameters"
        },
        {
            "location": "/js/es6/#default-parameters",
            "text": "function SmithPerson(firstName, dob, lastName='Smith') {\n    this.firstName = firstName;\n    this.dob = dob;\n    this.lastName = lastName;\n}",
            "title": "Default Parameters"
        },
        {
            "location": "/js/es6/#promises",
            "text": "var p1 = new Promise((resolve, reject) => {\n    const num = Math.random();\n    if (num < 0.5) {\n        resolve(num);\n    } else {\n        reject(num);\n    }\n});\n\np1.then(result => {\n    console.log(`Success: ${result}`);\n}).catch(err => {\n    console.log(`Error: ${err}`);   \n});",
            "title": "Promises"
        },
        {
            "location": "/js/es6/#asyncawait",
            "text": "// getIDs and getRecipe from previous block\nasync function getRecipiesAW() {\n    const IDs = await getIDs;\n    const recipe = await getRecipe(IDs[2]);\n\n    return recipe;\n}\n\ngetRecipiesAW().then(result => console.log(result));",
            "title": "Async/Await"
        },
        {
            "location": "/js/es6/#ajax",
            "text": "",
            "title": "AJAX"
        },
        {
            "location": "/js/es6/#with-xmlhttprequest",
            "text": "",
            "title": "With XMLHTTPRequest"
        },
        {
            "location": "/js/es6/#readystate",
            "text": "Value  State  Description      0  UNSENT  Client has been created. open() not called yet.    1  OPENED  open() has been called    2  HEADERS_RECEIVED  send() has been called, and headers and status are available    3  LOADING  Downloading; responseText holds partial data.    4  DONE  The operation is complete",
            "title": "readyState"
        },
        {
            "location": "/js/es6/#example",
            "text": "const XHR = new XMLHttpRequest();\nXHR.onreadystatechange = () => {\n    if (XHR.readyState === 4) {\n        console.log(`readyState: ${XHR.readyState}`);\n        if(XHR.status === 200) {\n            const url = JSON.parse(XHR.responseText).message;\n            console.log(url);\n        } else {\n            console.log(\"There was a problem\")\n        }\n    }\n};\nXHR.open(\"GET\", \"https://dog.ceo/api/breeds/image/random\");\nXHR.send();",
            "title": "Example"
        },
        {
            "location": "/js/es6/#with-fetch-updated-xhr",
            "text": "// .json() will return a promise that can be chained\nfetch('https://api.coindesk.com/v1/bpi/currentprice.json').then(response => {\n    console.log(`Response: ${response}`);\n    return response.json();\n}).then(data => {\n    console.log(data);\n}).catch(err => {\n    console.log(err);\n});",
            "title": "With Fetch (updated XHR)"
        },
        {
            "location": "/js/es6/#options",
            "text": "fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n        name: 'blue',\n        login: 'bluecat'    \n    })\n}).then(response => {\n\n}).catch(err => {\n\n});",
            "title": "Options"
        },
        {
            "location": "/js/es6/#error-handling",
            "text": "fetch(url).then(response => {\n    if(!response.ok) {\n        throw Error(\"Custom error\");\n    }\n    return response;\n}).then(goodResponse => {\n    console.log(\"ok\");  \n}).catch(err => {\n    console.log(err);\n});",
            "title": "Error Handling"
        },
        {
            "location": "/js/es6/#with-axios",
            "text": "<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>  axios.get(url).then(res => {\n    console.log(res);\n}).catch(err => {\n    console.log(err);\n});",
            "title": "With Axios"
        },
        {
            "location": "/js/dom/",
            "text": "The DOM is the document object model. \n\n\nIt is a structured representation of an HTML document.\n\n\nIt is used to connect webpages to scripts.\n\n\n\n\nAccessing Elements\n\n\nBy name/id/class\n\n\n\n// Old way\ndocument.getElementById('someId');\ndocument.getElementByClassName(\"someClass\");\ndocument.getElementsByTagName(\"tag (without angle brackets)\");\n\n// New way\ndocument.querySelector('.someClass');\ndocument.querySelector('div h1.title');\n\ndocument.querySelectorAll(\"div.note, div.alert\");\n\n\n\n\nBy relation\n\n\n\n\nvar stored = document.getElementById(\"someId\");\n\nvar children = stored.childNodes;\nvar parental = children.parentNode;\n\n\n\n\nAdding/Creating/Modifying Elements\n\n\nCreating Elements\n\n\nvar newP = document.createElement('p');\nvar pText = document.createTextNode(\"This is the text that will be placed in newP\");\nnewP.appendChild(pText);\n\n\n\n\nAdding Elements\n\n\nvar div = document.querySelector(\"container\");\ndiv.appendChild(newP);\n\nvar parent = div.parentNode;\n\n// Insert newP before div\nparent.insertBefore(newP, div);\n\n\n\n\nModifying Elements\n\n\nvar element = document.querySelector(\"#result\");\n\nelement.classList.remove(\"wrong\");\nelement.classList.add(\"correct\", \"txt-lg\");\nelement.classList.toggle(\"correct\");\nelement.classList.contains(\"foo\");\n\n\n\n\nEvents\n\n\nvar element = document.querySelectorAll(\".button\");\n\nelement.onClick = function() {\n    console.log(\"clicked\");\n};\n\nvar logEventType = function(e) {\n    console.log(\"event type: \", e.type);\n}\nelement.addEventListener(\"focus\", logEventType, false);\nelement.removeEventListener(\"focus\", logEventType, false);",
            "title": "DOM"
        },
        {
            "location": "/js/dom/#accessing-elements",
            "text": "",
            "title": "Accessing Elements"
        },
        {
            "location": "/js/dom/#by-nameidclass",
            "text": "// Old way\ndocument.getElementById('someId');\ndocument.getElementByClassName(\"someClass\");\ndocument.getElementsByTagName(\"tag (without angle brackets)\");\n\n// New way\ndocument.querySelector('.someClass');\ndocument.querySelector('div h1.title');\n\ndocument.querySelectorAll(\"div.note, div.alert\");",
            "title": "By name/id/class"
        },
        {
            "location": "/js/dom/#by-relation",
            "text": "var stored = document.getElementById(\"someId\");\n\nvar children = stored.childNodes;\nvar parental = children.parentNode;",
            "title": "By relation"
        },
        {
            "location": "/js/dom/#addingcreatingmodifying-elements",
            "text": "",
            "title": "Adding/Creating/Modifying Elements"
        },
        {
            "location": "/js/dom/#creating-elements",
            "text": "var newP = document.createElement('p');\nvar pText = document.createTextNode(\"This is the text that will be placed in newP\");\nnewP.appendChild(pText);",
            "title": "Creating Elements"
        },
        {
            "location": "/js/dom/#adding-elements",
            "text": "var div = document.querySelector(\"container\");\ndiv.appendChild(newP);\n\nvar parent = div.parentNode;\n\n// Insert newP before div\nparent.insertBefore(newP, div);",
            "title": "Adding Elements"
        },
        {
            "location": "/js/dom/#modifying-elements",
            "text": "var element = document.querySelector(\"#result\");\n\nelement.classList.remove(\"wrong\");\nelement.classList.add(\"correct\", \"txt-lg\");\nelement.classList.toggle(\"correct\");\nelement.classList.contains(\"foo\");",
            "title": "Modifying Elements"
        },
        {
            "location": "/js/dom/#events",
            "text": "var element = document.querySelectorAll(\".button\");\n\nelement.onClick = function() {\n    console.log(\"clicked\");\n};\n\nvar logEventType = function(e) {\n    console.log(\"event type: \", e.type);\n}\nelement.addEventListener(\"focus\", logEventType, false);\nelement.removeEventListener(\"focus\", logEventType, false);",
            "title": "Events"
        },
        {
            "location": "/js/jquery/",
            "text": "",
            "title": "jQuery"
        },
        {
            "location": "/nodejs/express/",
            "text": "Setup\n\n\nEnv\n\n\ntouch app.js\nnpm init\n# npm install express ejs --save\n# npm install body-parser --save # if needed\n# npm install method-override --save # if needed\n# npm install mongoose --save # if needed\n\nnpm install express ejs body-parser method-override mongoose --save\nnpm install connect-flash --save\nnpm install passport passport-local passport-local-mongoose body-parser express-session ejs --save\n\nmkdir views/partials\nmkdir public\n\n\n\n\napp.js\n\n\nvar express = require(\"express\");\nvar bodyParser = require('body-parser');\nvar methodOverride = require(\"method-override\");\nvar app = express();\n\napp.set(\"view engine\", \"ejs\");\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(express.static(\"public\"));\napp.use(methodOverride(\"_method\"));\n\napp.get(\"/\", function(req, res) {\n    res.send(\"Hello there!\");\n});\n\napp.listen(port, ip, function() {\n    console.log(\"Server has started\")\n});\n\n\n\n\nviews/partials/header.ejs\n\n\n<!-- include with <% include partials/header %> -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>To-Do List</title>\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"/style.css\">\n    </head>\n    <body>\n\n\n\n\nRoutes\n\n\nWildcard\n\n\n// Must go last!\napp.get(\"*\", function(req, res) {\n    res.send(\"Not a valid route\");\n});\n\n\n\n\nGet params\n\n\napp.get(\"/home/:data\", function(req, res) {\n    var data = req.params.data;\n});\n\n\n\n\nPost\n\n\n<form action=\"/post-req\" method=\"POST\">\n    <input type=\"text\" name=\"data\" placeholder=\"data\">\n    <button>Submit</button>\n</form>\n\n\n\n\napp.use(bodyParser.urlencoded({extended: true}));\napp.post(\"/post-req\", function(req, res) {\n    var data = req.body.data;\n    res.redirect(\"/\");\n});\n\n\n\n\nRouter\n\n\n// app.js\nvar indexRoutes = require(\"./routes/index\");\n\napp.use(\"/indexRoutes\", indexRoutes);\n\n\n\n\n//index.js\nvar express  = require(\"express\"),\n    router   = express.Router({mergeParams: true}),\n\nrouter.get(\"/\", function(req, res) {\n   res.render(\"index\");\n});\n\nmodule.exports = router;\n\n\n\n\nEJS\n\n\nIf logic\n\n\n<% if(true) { %>\n    <p>True</p>\n<% } else { %>\n    <p>False</p>\n<% } %>\n\n\n\n\nPassing information\n\n\n// app.js\nvar data = [1, 2, 3, 4, 5];\napp.get(\"/\", function(req, res) {\n    res.render(\"index.ejs\", {data: data});\n});\n\n\n\n\n<!-- index.ejs -->\n<p><%= data %></p>\n\n\n\n\nPassport\n\n\nSchema\n\n\nvar mongoose              = require(\"mongoose\"),\n    passportLocalMongoose = require(\"passport-local-mongoose\");\n\nvar userSchema = new mongoose.Schema({\n   username: String,\n   password: String\n});\n\nuserSchema.plugin(passportLocalMongoose);\n\nmodule.exports = mongoose.model(\"User\", userSchema);\n\n\n\n\nSetup\n\n\nnpm install express mongoose passport passport-local passport-local-mongoose body-parser express-session ejs --save\n\n\n\n\nvar express               = require(\"express\"),\n    app                   = express(),\n    mongoose              = require(\"mongoose\"),\n    passport              = require(\"passport\"),\n    bodyParser            = require(\"body-parser\"),\n    LocalStrategy         = require(\"passport-local\"),\n    passportLocalMongoose = require(\"passport-local-mongoose\"),\n    User                  = require(\"./models/user\");\n\nmongoose.connect(\"mongodb://localhost:27017/db_name\", {useNewUrlParser: true});\napp.use(require(\"express-session\")({\n    secret: \"secret_code\",\n    resave: false,\n    saveUninitialized: false\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n\npassport.use(new LocalStrategy(User.authenticate()));\npassport.serializeUser(User.serializeUser());\npassport.deserializeUser(User.deserializeUser());\n\n\n\n\nSign Up\n\n\napp.get(\"/register\", function(req, res) {\n    res.render(\"register\");\n}) \n\napp.post(\"/register\", function(req, res) {\n    User.register(new User({username: req.body.username}), req.body.password, function(err, user) {\n        if(err) {\n            console.log(err);\n            return res.render(\"register\");\n        }\n        passport.authenticate(\"local\")(req, res, function() {\n            res.redirect(\"/secret\");\n        });\n    });\n});\n\n\n\n\nLogin\n\n\napp.get(\"/login\", function(req, res) {\n   res.render(\"login\"); \n});\n\napp.post(\"/login\", passport.authenticate(\"local\", {\n    successRedirect: \"/secret\", \n    failureRedirect: \"/login\"\n\n}), function(req, res) {\n\n});\n\n\n\n\nLogout\n\n\napp.get(\"/logout\", function(req, res) {\n    req.logout();\n    res.redirect(\"/\");\n});\n\n\n\n\nSecret Page\n\n\nfunction isLoggedIn(req, res, next) {\n    if(req.isAuthenticated()) {\n        return next();\n    }\n    res.redirect(\"/login\");\n}\n\napp.get(\"/secret\", isLoggedIn, function(req, res) {\n   res.render(\"secret\") ;\n});\n\n\n\n\nAuthorization\n\n\n// Is logged in\nmiddlewareObj.isLoggedIn = function(req, res, next) {\n    if(req.isAuthenticated()) {\n        return next();\n    }\n    res.redirect(\"/login\");\n}\n\n// Ownership\nmiddlewareObj.checkCommentOwnership = function(req, res, next) {\n    if(req.isAuthenticated()) {\n        Comment.findById(req.params.comment_id, function(err, foundComment) {\n            if(err) {\n                res.redirect(\"back\");\n            } else {\n                if(foundComment.author.id.equals(req.user._id)) {\n                    next();\n                } else {\n                    res.redirect(\"back\");\n                }\n            }\n        });\n    } else {\n        res.redirect(\"back\");\n    }\n}\n\n\n\n\nForm\n\n\n<form action=\"/login\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"username\">\n    <input type=\"password\" name=\"password\" placeholder=\"password\">\n    <button>Login</button>\n</form>\n\n<form action=\"/register\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"username\">\n    <input type=\"password\" name=\"password\" placeholder=\"password\">\n    <button>Sign Up!</button>\n</form>",
            "title": "Express"
        },
        {
            "location": "/nodejs/express/#setup",
            "text": "",
            "title": "Setup"
        },
        {
            "location": "/nodejs/express/#env",
            "text": "touch app.js\nnpm init\n# npm install express ejs --save\n# npm install body-parser --save # if needed\n# npm install method-override --save # if needed\n# npm install mongoose --save # if needed\n\nnpm install express ejs body-parser method-override mongoose --save\nnpm install connect-flash --save\nnpm install passport passport-local passport-local-mongoose body-parser express-session ejs --save\n\nmkdir views/partials\nmkdir public",
            "title": "Env"
        },
        {
            "location": "/nodejs/express/#appjs",
            "text": "var express = require(\"express\");\nvar bodyParser = require('body-parser');\nvar methodOverride = require(\"method-override\");\nvar app = express();\n\napp.set(\"view engine\", \"ejs\");\napp.use(bodyParser.urlencoded({extended: true}));\napp.use(express.static(\"public\"));\napp.use(methodOverride(\"_method\"));\n\napp.get(\"/\", function(req, res) {\n    res.send(\"Hello there!\");\n});\n\napp.listen(port, ip, function() {\n    console.log(\"Server has started\")\n});",
            "title": "app.js"
        },
        {
            "location": "/nodejs/express/#viewspartialsheaderejs",
            "text": "<!-- include with <% include partials/header %> -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>To-Do List</title>\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"/style.css\">\n    </head>\n    <body>",
            "title": "views/partials/header.ejs"
        },
        {
            "location": "/nodejs/express/#routes",
            "text": "",
            "title": "Routes"
        },
        {
            "location": "/nodejs/express/#wildcard",
            "text": "// Must go last!\napp.get(\"*\", function(req, res) {\n    res.send(\"Not a valid route\");\n});",
            "title": "Wildcard"
        },
        {
            "location": "/nodejs/express/#get-params",
            "text": "app.get(\"/home/:data\", function(req, res) {\n    var data = req.params.data;\n});",
            "title": "Get params"
        },
        {
            "location": "/nodejs/express/#post",
            "text": "<form action=\"/post-req\" method=\"POST\">\n    <input type=\"text\" name=\"data\" placeholder=\"data\">\n    <button>Submit</button>\n</form>  app.use(bodyParser.urlencoded({extended: true}));\napp.post(\"/post-req\", function(req, res) {\n    var data = req.body.data;\n    res.redirect(\"/\");\n});",
            "title": "Post"
        },
        {
            "location": "/nodejs/express/#router",
            "text": "// app.js\nvar indexRoutes = require(\"./routes/index\");\n\napp.use(\"/indexRoutes\", indexRoutes);  //index.js\nvar express  = require(\"express\"),\n    router   = express.Router({mergeParams: true}),\n\nrouter.get(\"/\", function(req, res) {\n   res.render(\"index\");\n});\n\nmodule.exports = router;",
            "title": "Router"
        },
        {
            "location": "/nodejs/express/#ejs",
            "text": "",
            "title": "EJS"
        },
        {
            "location": "/nodejs/express/#if-logic",
            "text": "<% if(true) { %>\n    <p>True</p>\n<% } else { %>\n    <p>False</p>\n<% } %>",
            "title": "If logic"
        },
        {
            "location": "/nodejs/express/#passing-information",
            "text": "// app.js\nvar data = [1, 2, 3, 4, 5];\napp.get(\"/\", function(req, res) {\n    res.render(\"index.ejs\", {data: data});\n});  <!-- index.ejs -->\n<p><%= data %></p>",
            "title": "Passing information"
        },
        {
            "location": "/nodejs/express/#passport",
            "text": "",
            "title": "Passport"
        },
        {
            "location": "/nodejs/express/#schema",
            "text": "var mongoose              = require(\"mongoose\"),\n    passportLocalMongoose = require(\"passport-local-mongoose\");\n\nvar userSchema = new mongoose.Schema({\n   username: String,\n   password: String\n});\n\nuserSchema.plugin(passportLocalMongoose);\n\nmodule.exports = mongoose.model(\"User\", userSchema);",
            "title": "Schema"
        },
        {
            "location": "/nodejs/express/#setup_1",
            "text": "npm install express mongoose passport passport-local passport-local-mongoose body-parser express-session ejs --save  var express               = require(\"express\"),\n    app                   = express(),\n    mongoose              = require(\"mongoose\"),\n    passport              = require(\"passport\"),\n    bodyParser            = require(\"body-parser\"),\n    LocalStrategy         = require(\"passport-local\"),\n    passportLocalMongoose = require(\"passport-local-mongoose\"),\n    User                  = require(\"./models/user\");\n\nmongoose.connect(\"mongodb://localhost:27017/db_name\", {useNewUrlParser: true});\napp.use(require(\"express-session\")({\n    secret: \"secret_code\",\n    resave: false,\n    saveUninitialized: false\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n\npassport.use(new LocalStrategy(User.authenticate()));\npassport.serializeUser(User.serializeUser());\npassport.deserializeUser(User.deserializeUser());",
            "title": "Setup"
        },
        {
            "location": "/nodejs/express/#sign-up",
            "text": "app.get(\"/register\", function(req, res) {\n    res.render(\"register\");\n}) \n\napp.post(\"/register\", function(req, res) {\n    User.register(new User({username: req.body.username}), req.body.password, function(err, user) {\n        if(err) {\n            console.log(err);\n            return res.render(\"register\");\n        }\n        passport.authenticate(\"local\")(req, res, function() {\n            res.redirect(\"/secret\");\n        });\n    });\n});",
            "title": "Sign Up"
        },
        {
            "location": "/nodejs/express/#login",
            "text": "app.get(\"/login\", function(req, res) {\n   res.render(\"login\"); \n});\n\napp.post(\"/login\", passport.authenticate(\"local\", {\n    successRedirect: \"/secret\", \n    failureRedirect: \"/login\"\n\n}), function(req, res) {\n\n});",
            "title": "Login"
        },
        {
            "location": "/nodejs/express/#logout",
            "text": "app.get(\"/logout\", function(req, res) {\n    req.logout();\n    res.redirect(\"/\");\n});",
            "title": "Logout"
        },
        {
            "location": "/nodejs/express/#secret-page",
            "text": "function isLoggedIn(req, res, next) {\n    if(req.isAuthenticated()) {\n        return next();\n    }\n    res.redirect(\"/login\");\n}\n\napp.get(\"/secret\", isLoggedIn, function(req, res) {\n   res.render(\"secret\") ;\n});",
            "title": "Secret Page"
        },
        {
            "location": "/nodejs/express/#authorization",
            "text": "// Is logged in\nmiddlewareObj.isLoggedIn = function(req, res, next) {\n    if(req.isAuthenticated()) {\n        return next();\n    }\n    res.redirect(\"/login\");\n}\n\n// Ownership\nmiddlewareObj.checkCommentOwnership = function(req, res, next) {\n    if(req.isAuthenticated()) {\n        Comment.findById(req.params.comment_id, function(err, foundComment) {\n            if(err) {\n                res.redirect(\"back\");\n            } else {\n                if(foundComment.author.id.equals(req.user._id)) {\n                    next();\n                } else {\n                    res.redirect(\"back\");\n                }\n            }\n        });\n    } else {\n        res.redirect(\"back\");\n    }\n}",
            "title": "Authorization"
        },
        {
            "location": "/nodejs/express/#form",
            "text": "<form action=\"/login\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"username\">\n    <input type=\"password\" name=\"password\" placeholder=\"password\">\n    <button>Login</button>\n</form>\n\n<form action=\"/register\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"username\">\n    <input type=\"password\" name=\"password\" placeholder=\"password\">\n    <button>Sign Up!</button>\n</form>",
            "title": "Form"
        },
        {
            "location": "/mongodb/mongo/",
            "text": "Commands\n\n\nmongo\nshow dbs\nuse <db> // Created if it doesn't exist\ndb.<collection>.insert({param: \"val\", param2: \"val2\"})\nshow collections\n\ndb.<collection>.find() // returns everything\ndb.<collection>.find({name: \"Jim\"})\n\ndb.<collection>.update({age: 16}, {canDrive: true}) // Overrides everything\ndb.<collection>.update({age: 16}, {$set: {age: 21, canDrink: \"rue}})\n\ndb.<collection>.remove({age: 16})",
            "title": "Mongo"
        },
        {
            "location": "/mongodb/mongo/#commands",
            "text": "mongo\nshow dbs\nuse <db> // Created if it doesn't exist\ndb.<collection>.insert({param: \"val\", param2: \"val2\"})\nshow collections\n\ndb.<collection>.find() // returns everything\ndb.<collection>.find({name: \"Jim\"})\n\ndb.<collection>.update({age: 16}, {canDrive: true}) // Overrides everything\ndb.<collection>.update({age: 16}, {$set: {age: 21, canDrink: \"rue}})\n\ndb.<collection>.remove({age: 16})",
            "title": "Commands"
        },
        {
            "location": "/mongodb/mongoose/",
            "text": "Setup with node.js\n\n\nnpm install mongoose --save\n\n\n\n\nvar mongoose = require(\"mongoose\");\nmongoose.connect(\"mongodb://localhost:port/db_name\", {useNewUrlParser: true});\n\nvar mySchema = new mongoose.Schema({ \n    name: String,\n    age: Number,\n    canDrive: Boolean,\n    comments: [{body: String, data: Date}]\n    created: {type: Date, default: Date.now}\n\n});\nvar My = mongoose.model(\"My\", mySchema);\n\n\n\n\nBasics\n\n\nCreate\n\n\n// Example One\nMy.create({\n    name: \"Bob\",\n    age: 15,\n    canDrive: true\n}, function(err, my) {\n    if(err) {\n        console.log(err);\n    } else {\n        console.log(my);\n    }\n});\n\n// Example Two\nvar name = req.body.name;\nvar image = req.body.image;\nvar description = req.body.description;\nvar author = {\n    id: req.user._id,\n    username: req.user.username\n};\n\nvar newCampground = {name: name, image: image, description: description, author: author};\nCampground.create(newCampground, function(err, newSite) {\nif(err) {\n    console.log(\"Error\");\n} else {\n    res.redirect(\"/\");\n}\n\n\n\n\nFind\n\n\nMy.find({}, function(err, my) {\n  if(err) {\n      console.log(err);\n  } else {\n      console.log(my);\n  }\n});\n\n\n\n\nRemove\n\n\nCampground.remove({}, function(err) {\n  if(err) {\n    console.log(err);\n  }\n});\n\n\n\n\nFind by id\n\n\nMy.findById(id, function(err, my) {\n\n});\n\n\n\n\nFind by id and update\n\n\nMy.findByIdAndUpdate(id, my, function(err, my) {\n\n});\n\n\n\n\nDelete by id\n\n\nMy.findByIdAndRemove(id, function(err, my) {\n\n});\n\n\n\n\nAssociations\n\n\nEmbed\n\n\nvar postSchema = new mongoose.Schema({\n   title: String,\n   content: String\n});\nvar Post = mongoose.model(\"Post\", postSchema);\n\nvar userSchema = new mongoose.Schema({\n   email: String,\n   name: String,\n   posts: [postSchema]\n});\nvar User = mongoose.model(\"User\", userSchema);\n\n\nvar newUser = new User({\n  email: \"email\",\n  name: \"name\"\n});\nnewUser.posts.push({\n  title: \"title\",\n  content: \"content\"\n})\n\n\n\n\nReference\n\n\nvar postSchema = new mongoose.Schema({\n   title: String,\n   content: String\n});\nvar Post = mongoose.model(\"Post\", postSchema);\n\nvar userSchema = new mongoose.Schema({\n    name: String,\n    description: String,\n    posts: [{\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Post\"\n    }],\n    author: {\n        id: {\n            type: mongoose.Schema.Types.ObjectId,\n            ref: \"User\" // defined elsewhere\n        },\n        username: String\n    }\n\n});\nvar User = mongoose.model(\"User\", userSchema);\n\n\n\n\nModels\n\n\nCampground example\n\n\nvar mongoose = require(\"mongoose\");\n\nvar campgroundSchema = new mongoose.Schema({\n   name: String,\n   image: String,\n   description: String,\n   cost: Number,\n   createdAt: {type: Date, default: Date.now},\n   comments : [{\n       type: mongoose.Schema.Types.ObjectId,\n       ref: \"Comment\"\n   }],\n   author: {\n      id: {\n         type: mongoose.Schema.Types.ObjectId,\n         ref: \"User\"\n      },\n      username: String\n   }\n});\n\nmodule.exports = mongoose.model(\"Campground\", campgroundSchema);",
            "title": "Mongoose"
        },
        {
            "location": "/mongodb/mongoose/#setup-with-nodejs",
            "text": "npm install mongoose --save  var mongoose = require(\"mongoose\");\nmongoose.connect(\"mongodb://localhost:port/db_name\", {useNewUrlParser: true});\n\nvar mySchema = new mongoose.Schema({ \n    name: String,\n    age: Number,\n    canDrive: Boolean,\n    comments: [{body: String, data: Date}]\n    created: {type: Date, default: Date.now}\n\n});\nvar My = mongoose.model(\"My\", mySchema);",
            "title": "Setup with node.js"
        },
        {
            "location": "/mongodb/mongoose/#basics",
            "text": "",
            "title": "Basics"
        },
        {
            "location": "/mongodb/mongoose/#create",
            "text": "// Example One\nMy.create({\n    name: \"Bob\",\n    age: 15,\n    canDrive: true\n}, function(err, my) {\n    if(err) {\n        console.log(err);\n    } else {\n        console.log(my);\n    }\n});\n\n// Example Two\nvar name = req.body.name;\nvar image = req.body.image;\nvar description = req.body.description;\nvar author = {\n    id: req.user._id,\n    username: req.user.username\n};\n\nvar newCampground = {name: name, image: image, description: description, author: author};\nCampground.create(newCampground, function(err, newSite) {\nif(err) {\n    console.log(\"Error\");\n} else {\n    res.redirect(\"/\");\n}",
            "title": "Create"
        },
        {
            "location": "/mongodb/mongoose/#find",
            "text": "My.find({}, function(err, my) {\n  if(err) {\n      console.log(err);\n  } else {\n      console.log(my);\n  }\n});",
            "title": "Find"
        },
        {
            "location": "/mongodb/mongoose/#remove",
            "text": "Campground.remove({}, function(err) {\n  if(err) {\n    console.log(err);\n  }\n});",
            "title": "Remove"
        },
        {
            "location": "/mongodb/mongoose/#find-by-id",
            "text": "My.findById(id, function(err, my) {\n\n});",
            "title": "Find by id"
        },
        {
            "location": "/mongodb/mongoose/#find-by-id-and-update",
            "text": "My.findByIdAndUpdate(id, my, function(err, my) {\n\n});",
            "title": "Find by id and update"
        },
        {
            "location": "/mongodb/mongoose/#delete-by-id",
            "text": "My.findByIdAndRemove(id, function(err, my) {\n\n});",
            "title": "Delete by id"
        },
        {
            "location": "/mongodb/mongoose/#associations",
            "text": "",
            "title": "Associations"
        },
        {
            "location": "/mongodb/mongoose/#embed",
            "text": "var postSchema = new mongoose.Schema({\n   title: String,\n   content: String\n});\nvar Post = mongoose.model(\"Post\", postSchema);\n\nvar userSchema = new mongoose.Schema({\n   email: String,\n   name: String,\n   posts: [postSchema]\n});\nvar User = mongoose.model(\"User\", userSchema);\n\n\nvar newUser = new User({\n  email: \"email\",\n  name: \"name\"\n});\nnewUser.posts.push({\n  title: \"title\",\n  content: \"content\"\n})",
            "title": "Embed"
        },
        {
            "location": "/mongodb/mongoose/#reference",
            "text": "var postSchema = new mongoose.Schema({\n   title: String,\n   content: String\n});\nvar Post = mongoose.model(\"Post\", postSchema);\n\nvar userSchema = new mongoose.Schema({\n    name: String,\n    description: String,\n    posts: [{\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Post\"\n    }],\n    author: {\n        id: {\n            type: mongoose.Schema.Types.ObjectId,\n            ref: \"User\" // defined elsewhere\n        },\n        username: String\n    }\n\n});\nvar User = mongoose.model(\"User\", userSchema);",
            "title": "Reference"
        },
        {
            "location": "/mongodb/mongoose/#models",
            "text": "",
            "title": "Models"
        },
        {
            "location": "/mongodb/mongoose/#campground-example",
            "text": "var mongoose = require(\"mongoose\");\n\nvar campgroundSchema = new mongoose.Schema({\n   name: String,\n   image: String,\n   description: String,\n   cost: Number,\n   createdAt: {type: Date, default: Date.now},\n   comments : [{\n       type: mongoose.Schema.Types.ObjectId,\n       ref: \"Comment\"\n   }],\n   author: {\n      id: {\n         type: mongoose.Schema.Types.ObjectId,\n         ref: \"User\"\n      },\n      username: String\n   }\n});\n\nmodule.exports = mongoose.model(\"Campground\", campgroundSchema);",
            "title": "Campground example"
        },
        {
            "location": "/linux/commands/",
            "text": "chmod\n\n\nExplination of numbers\n\n\nPermission:\n1 - can execute\n2 - can write\n4 - can read\n\n\n3 (1+2) - can execute and write\n6 (2+4) - can write and read\n\n\nPosition of the digit:\n1 - what owner can\n2 - what users in the file group can\n3 - what users not in the file group can\n\n\nchmod 700 - owner can read, write, and execute\nchmod 777 - everyone can read, write, and execute\n\n\nshutdown\n\n\nExplination\n\nshutdown [-akrhPHfFnc] [-t sec] time [message]\n\n\n\n\n\n\n\n\nFlag\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n-r\n\n\nReboot after shutdown\n\n\n\n\n\n\n-P\n\n\nShutdown and then power down\n\n\n\n\n\n\nnow\n\n\nShutdown right after execution\n\n\n\n\n\n\n\n\nsudo shutdown -r now\n\n\nnginx\n\n\nsudo systemctl stop nginx\nsudo systemctl start nginx\nsudo systemctl restart nginx\n\nsudo systemctl reload nginx\n\n\n\n\npm2\n\n\npm2 start script.js\npm2 stop app_name_or_id\npm2 restart app_name_or_id\npm2 list",
            "title": "Commands"
        },
        {
            "location": "/linux/commands/#chmod",
            "text": "Explination of numbers  Permission:\n1 - can execute\n2 - can write\n4 - can read  3 (1+2) - can execute and write\n6 (2+4) - can write and read  Position of the digit:\n1 - what owner can\n2 - what users in the file group can\n3 - what users not in the file group can  chmod 700 - owner can read, write, and execute\nchmod 777 - everyone can read, write, and execute",
            "title": "chmod"
        },
        {
            "location": "/linux/commands/#shutdown",
            "text": "Explination \nshutdown [-akrhPHfFnc] [-t sec] time [message]     Flag  Result      -r  Reboot after shutdown    -P  Shutdown and then power down    now  Shutdown right after execution     sudo shutdown -r now",
            "title": "shutdown"
        },
        {
            "location": "/linux/commands/#nginx",
            "text": "sudo systemctl stop nginx\nsudo systemctl start nginx\nsudo systemctl restart nginx\n\nsudo systemctl reload nginx",
            "title": "nginx"
        },
        {
            "location": "/linux/commands/#pm2",
            "text": "pm2 start script.js\npm2 stop app_name_or_id\npm2 restart app_name_or_id\npm2 list",
            "title": "pm2"
        },
        {
            "location": "/other/rest/",
            "text": "RESTful Routes\n\n\n\n\n\n\n\n\nName\n\n\nPath\n\n\nHTTP Verb\n\n\nPurpose\n\n\nMongoose Method\n\n\n\n\n\n\n\n\n\n\nIndex\n\n\n/dogs\n\n\nGET\n\n\nList all dogs\n\n\nDog.find()\n\n\n\n\n\n\nNew\n\n\n/dogs/new\n\n\nGET\n\n\nShow new dog form\n\n\nN/A\n\n\n\n\n\n\nCreate\n\n\n/dogs\n\n\nPOST\n\n\nCreate a new dog, then redirect somewhere\n\n\nDog.create()\n\n\n\n\n\n\nShow\n\n\n/dogs/:id\n\n\nGET\n\n\nShow info about one specific dog\n\n\nDog.findById()\n\n\n\n\n\n\nEdit\n\n\n/dogs/:id/edit\n\n\nGET\n\n\nShow edit form for one dog\n\n\nDog.findById()\n\n\n\n\n\n\nUpdate\n\n\n/dogs/:id\n\n\nPUT\n\n\nUpdate a particular dog, then redirect somewhere\n\n\nDog.findByIdAndUpdate()\n\n\n\n\n\n\nDestroy\n\n\n/dogs/:id\n\n\nDELETE\n\n\nDelete a particular dog, then redirect somewhere\n\n\nDog.findByIdAndRemove()\n\n\n\n\n\n\n\n\nExample\n\n\nIndex\n\n\napp.get(\"/blogs\", function(req, res) {\n    Blog.find({}, function(err, blogs) {\n       if(err) {\n           console.log(err);\n       } else {\n           res.render(\"index\", {blogs: blogs});\n       }\n    });\n});\n\n\n\n\nNew\n\n\napp.get(\"/blogs/new\", function(req, res) {\n   res.render(\"new\"); \n});\n\n\n\n\nCreate\n\n\napp.post(\"/blogs\", function(req, res) {\n   Blog.create(req.body.blog, function(err, newBlog) {\n       if(err) {\n           res.render(\"new\");\n       } else {\n           res.redirect(\"/blogs\");\n       }\n   }); \n});\n\n\n\n\nShow\n\n\napp.get(\"/blogs/:id\", function(req, res) {\n   Blog.findById(req.params.id, function(err, foundBlog) {\n      if(err) {\n          res.redirect(\"/blogs\");\n      } else {\n          res.render(\"show\", {blog: foundBlog});\n      } \n   });\n});\n\n\n\n\nEdit\n\n\napp.get(\"/blogs/:id/edit\", function(req, res) {\n    Blog.findById(req.params.id, function(err, foundBlog) {\n        if(err) {\n            res.redirect(\"/blogs\")\n        } else {\n            res.render(\"edit\", {blog: foundBlog});\n        }\n    });\n}); \n\n\n\n\nUpdate\n\n\n// action=\"/blogs/<%= blog._id %>?_method=PUT\" method=\"POST\"\napp.put(\"/blogs/:id\", function(req, res) {\n    Blog.findByIdAndUpdate(req.params.id, req.body.blog, function(err, updatedBlog) {\n       if(err) {\n           res.redirect(\"/blogs\");\n       } else {\n           res.redirect(\"/blogs/\" + req.params.id);\n       }\n    });\n});\n\n\n\n\nDestroy\n\n\n// action=\"/blogs/<%= blog._id %>?_method=DELETE\" method=\"POST\"\napp.delete(\"/blogs/:id\", function(req, res) {\n    Blog.findByIdAndRemove(req.params.id, function(err) {\n       if(err) {\n           res.redirect(\"/blogs\");\n       } else {\n           res.redirect(\"/blogs\");\n       }\n    });\n});",
            "title": "RESTful Routes"
        },
        {
            "location": "/other/rest/#restful-routes",
            "text": "Name  Path  HTTP Verb  Purpose  Mongoose Method      Index  /dogs  GET  List all dogs  Dog.find()    New  /dogs/new  GET  Show new dog form  N/A    Create  /dogs  POST  Create a new dog, then redirect somewhere  Dog.create()    Show  /dogs/:id  GET  Show info about one specific dog  Dog.findById()    Edit  /dogs/:id/edit  GET  Show edit form for one dog  Dog.findById()    Update  /dogs/:id  PUT  Update a particular dog, then redirect somewhere  Dog.findByIdAndUpdate()    Destroy  /dogs/:id  DELETE  Delete a particular dog, then redirect somewhere  Dog.findByIdAndRemove()",
            "title": "RESTful Routes"
        },
        {
            "location": "/other/rest/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/other/rest/#index",
            "text": "app.get(\"/blogs\", function(req, res) {\n    Blog.find({}, function(err, blogs) {\n       if(err) {\n           console.log(err);\n       } else {\n           res.render(\"index\", {blogs: blogs});\n       }\n    });\n});",
            "title": "Index"
        },
        {
            "location": "/other/rest/#new",
            "text": "app.get(\"/blogs/new\", function(req, res) {\n   res.render(\"new\"); \n});",
            "title": "New"
        },
        {
            "location": "/other/rest/#create",
            "text": "app.post(\"/blogs\", function(req, res) {\n   Blog.create(req.body.blog, function(err, newBlog) {\n       if(err) {\n           res.render(\"new\");\n       } else {\n           res.redirect(\"/blogs\");\n       }\n   }); \n});",
            "title": "Create"
        },
        {
            "location": "/other/rest/#show",
            "text": "app.get(\"/blogs/:id\", function(req, res) {\n   Blog.findById(req.params.id, function(err, foundBlog) {\n      if(err) {\n          res.redirect(\"/blogs\");\n      } else {\n          res.render(\"show\", {blog: foundBlog});\n      } \n   });\n});",
            "title": "Show"
        },
        {
            "location": "/other/rest/#edit",
            "text": "app.get(\"/blogs/:id/edit\", function(req, res) {\n    Blog.findById(req.params.id, function(err, foundBlog) {\n        if(err) {\n            res.redirect(\"/blogs\")\n        } else {\n            res.render(\"edit\", {blog: foundBlog});\n        }\n    });\n});",
            "title": "Edit"
        },
        {
            "location": "/other/rest/#update",
            "text": "// action=\"/blogs/<%= blog._id %>?_method=PUT\" method=\"POST\"\napp.put(\"/blogs/:id\", function(req, res) {\n    Blog.findByIdAndUpdate(req.params.id, req.body.blog, function(err, updatedBlog) {\n       if(err) {\n           res.redirect(\"/blogs\");\n       } else {\n           res.redirect(\"/blogs/\" + req.params.id);\n       }\n    });\n});",
            "title": "Update"
        },
        {
            "location": "/other/rest/#destroy",
            "text": "// action=\"/blogs/<%= blog._id %>?_method=DELETE\" method=\"POST\"\napp.delete(\"/blogs/:id\", function(req, res) {\n    Blog.findByIdAndRemove(req.params.id, function(err) {\n       if(err) {\n           res.redirect(\"/blogs\");\n       } else {\n           res.redirect(\"/blogs\");\n       }\n    });\n});",
            "title": "Destroy"
        },
        {
            "location": "/other/expressTemplate/",
            "text": "Express Template\n\n\nInstall\n\n\ntouch app.js\nnpm init\n\nnpm install express ejs body-parser method-override mongoose --save\nnpm install passport passport-local passport-local-mongoose body-parser express-session ejs --save\nnpm install connect-flash --save\nnpm install moment --save\n\nmkdir views views/partials views/partials/header.ejs views/partials/footer.ejs public public/stylesheets public/scripts models routes middleware\n\n\n\n\napp.js\n\n\nvar express        = require(\"express\"),\n    app            = express(),\n    bodyParser     = require(\"body-parser\"),\n    mongoose       = require(\"mongoose\"),\n    flash          = require(\"connect-flash\"),\n    passport       = require(\"passport\"),\n    LocalStrategy  = require(\"passport-local\"),\n    methodOverride = require(\"method-override\"),\n    MyModel        = require(\"./models/model\");\n\nvar indexRoutes = require(\"./routes/index\");\n\nmongoose.connect(\"mongodb://localhost:port/db_name\", {useNewUrlParser: true});\napp.use(bodyParser.urlencoded({extended: true}));\napp.set(\"view engine\", \"ejs\");\napp.use(express.static(__dirname + \"/public\"));\napp.use(methodOverride(\"_method\"));\napp.use(flash());\n\n// passport config\napp.use(require(\"express-session\")({\n    secret: \"Add super secret code here\",\n    resave: false,\n    saveUninitialized: false\n}));\napp.use(passport.initialize());\napp.use(passport.session());\npassport.use(new LocalStrategy(User.authenticate()));\npassport.serializeUser(User.serializeUser());\npassport.deserializeUser(User.deserializeUser());\n\n// add the currentUser var to every route\napp.use(function(req, res, next) {\n    res.locals.currentUser = req.user;\n    res.locals.error = req.flash(\"error\");\n    res.locals.success = req.flash(\"success\");\n    //app.locals.moment = require('moment'); // if needed\n    next();\n});\n\n// add different route files\napp.use(indexRoutes);\napp.use(\"/path/:id/path2\", idRoutes);\n\napp.listen(process.env.PORT, process.env.IP, function() {\n   console.log(\"The server has started\");\n});\n\n\n\n\nRoutes module\n\n\nvar express    = require(\"express\"),\n    router     = express.Router(),\n    passport   = require(\"passport\");\n\nrouter.get(\"/\", function(req, res) {\n   res.render(\"landing\");\n});\n\nmodule.exports = router;\n\n\n\n\nMiddleware\n\n\nmiddleware = require(\"../middleware\");\n\nvar middlewareObj = {};\n\nmiddlewareObj.isLoggedIn = function(req, res, next) {\n    if(req.isAuthenticated()) {\n        return next();\n    }\n    req.flash(\"error\", \"You need to be logged in to do that\");\n    res.redirect(\"/login\");\n}\n\nmodule.exports = middlewareObj",
            "title": "Express Template"
        },
        {
            "location": "/other/expressTemplate/#express-template",
            "text": "",
            "title": "Express Template"
        },
        {
            "location": "/other/expressTemplate/#install",
            "text": "touch app.js\nnpm init\n\nnpm install express ejs body-parser method-override mongoose --save\nnpm install passport passport-local passport-local-mongoose body-parser express-session ejs --save\nnpm install connect-flash --save\nnpm install moment --save\n\nmkdir views views/partials views/partials/header.ejs views/partials/footer.ejs public public/stylesheets public/scripts models routes middleware",
            "title": "Install"
        },
        {
            "location": "/other/expressTemplate/#appjs",
            "text": "var express        = require(\"express\"),\n    app            = express(),\n    bodyParser     = require(\"body-parser\"),\n    mongoose       = require(\"mongoose\"),\n    flash          = require(\"connect-flash\"),\n    passport       = require(\"passport\"),\n    LocalStrategy  = require(\"passport-local\"),\n    methodOverride = require(\"method-override\"),\n    MyModel        = require(\"./models/model\");\n\nvar indexRoutes = require(\"./routes/index\");\n\nmongoose.connect(\"mongodb://localhost:port/db_name\", {useNewUrlParser: true});\napp.use(bodyParser.urlencoded({extended: true}));\napp.set(\"view engine\", \"ejs\");\napp.use(express.static(__dirname + \"/public\"));\napp.use(methodOverride(\"_method\"));\napp.use(flash());\n\n// passport config\napp.use(require(\"express-session\")({\n    secret: \"Add super secret code here\",\n    resave: false,\n    saveUninitialized: false\n}));\napp.use(passport.initialize());\napp.use(passport.session());\npassport.use(new LocalStrategy(User.authenticate()));\npassport.serializeUser(User.serializeUser());\npassport.deserializeUser(User.deserializeUser());\n\n// add the currentUser var to every route\napp.use(function(req, res, next) {\n    res.locals.currentUser = req.user;\n    res.locals.error = req.flash(\"error\");\n    res.locals.success = req.flash(\"success\");\n    //app.locals.moment = require('moment'); // if needed\n    next();\n});\n\n// add different route files\napp.use(indexRoutes);\napp.use(\"/path/:id/path2\", idRoutes);\n\napp.listen(process.env.PORT, process.env.IP, function() {\n   console.log(\"The server has started\");\n});",
            "title": "app.js"
        },
        {
            "location": "/other/expressTemplate/#routes-module",
            "text": "var express    = require(\"express\"),\n    router     = express.Router(),\n    passport   = require(\"passport\");\n\nrouter.get(\"/\", function(req, res) {\n   res.render(\"landing\");\n});\n\nmodule.exports = router;",
            "title": "Routes module"
        },
        {
            "location": "/other/expressTemplate/#middleware",
            "text": "middleware = require(\"../middleware\");\n\nvar middlewareObj = {};\n\nmiddlewareObj.isLoggedIn = function(req, res, next) {\n    if(req.isAuthenticated()) {\n        return next();\n    }\n    req.flash(\"error\", \"You need to be logged in to do that\");\n    res.redirect(\"/login\");\n}\n\nmodule.exports = middlewareObj",
            "title": "Middleware"
        }
    ]
}